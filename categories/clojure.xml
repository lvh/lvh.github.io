<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lvh (Posts about clojure)</title><link>https://www.lvh.io/</link><description></description><atom:link href="https://www.lvh.io/categories/clojure.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 27 Oct 2019 15:03:43 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Solving regex crosswords</title><link>https://www.lvh.io/posts/solving-regex-crosswords.html</link><dc:creator>lvh</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://regexcrossword.com/"&gt;Regex Crossword&lt;/a&gt; is a puzzle game to help you
practice regular expressions. I wrote a program to solve them. You can find it
on GitHub as &lt;a href="https://github.com/lvh/regex-crossword"&gt;&lt;code&gt;lvh/regex-crossword&lt;/code&gt;&lt;/a&gt;.
This blog post walks you through how I wrote it using logic programming. &lt;/p&gt;
&lt;p&gt;To me this game feels more like Sudoku than a crossword. When you solve a
crossword, you start by filling out the words you're certain of and use those
answers as hints for the rest. Backtracking is relatively rare. In a sudoku, you
might start by filling out a handful of certain boxes, but in most puzzles you
quickly need to backtrack. That distinction shapes how I think of solving it:
searching and backtracking is a natural fit for logic programming.&lt;/p&gt;
&lt;p&gt;Logic programming is a niche technology, but in its sweet spot it's miraculous.
I'll introduce the concept to help you recognize what sorts of problems it's
good at. Worst case, you'll enjoy a cool hack. Best case you'll get the
satisfaction of writing a beautiful solution to a problem some time in the
future.&lt;/p&gt;
&lt;p&gt;My programming language of choice is Clojure, and Clojure has
&lt;a href="https://github.com/clojure/core.logic"&gt;&lt;code&gt;clojure/core.logic&lt;/code&gt;&lt;/a&gt;, a logic programming library. Because logic
programming is such a specialized tool, it's more useful to have libraries that
let you "drop in to" logic programming than to do everything in a full-blown
logic programming language.&lt;/p&gt;
&lt;h2&gt;Approach&lt;/h2&gt;
&lt;p&gt;It would not be a bad idea to read &lt;a href="https://regexcrossword.com/howtoplay"&gt;the instructions for Regex
Crossword&lt;/a&gt;. I'll also assume you have seen some basic regular
expressions. Hopefully the Clojure will be piecemeal enough you can
just follow along, but reading a tutorial wouldn't hurt.&lt;/p&gt;
&lt;p&gt;Let's take a look at the first beginner puzzle:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.lvh.io/img/regex-crossword/beginner1.png"&gt;&lt;/p&gt;
&lt;p&gt;Each regex part applies to some number of unknowns (empty boxes). The first row
regex &lt;code&gt;HE|LL|O+&lt;/code&gt; applies to the unknowns of the first row. The first column
regex &lt;code&gt;[^SPEAK]+&lt;/code&gt; applies to the unknowns of the first column. Both constrain
the top left unknown: we're counting on our logic programming engine at being
convenient for expressing that "cascading" of constraints.&lt;/p&gt;
&lt;p&gt;An unknown is just a logic variable in constraint logic programming. For brevity
we'll call them "lvars" (&lt;em&gt;[ell vars]&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Rows, columns (and in later puzzles hexagon lines) are all just layout.
Fundamentally it's all just a regex applying to some lvars.&lt;/p&gt;
&lt;h2&gt;Breaking down regular expressions&lt;/h2&gt;
&lt;p&gt;Most regular expressions have structure, like &lt;code&gt;(AB|CD)XY&lt;/code&gt;. We'll solve this
problem recursively: if &lt;code&gt;(AB|CD)XY&lt;/code&gt; matches lvars &lt;code&gt;p q r s&lt;/code&gt;, then presumably
&lt;code&gt;pq&lt;/code&gt; must match &lt;code&gt;AB|CD&lt;/code&gt; and &lt;code&gt;rs&lt;/code&gt; must match &lt;code&gt;XY&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;(There are some counterexamples to the idea that we can solve the entire problem
recursively! For example, backrefs within a regex would require a second pass,
and backrefs across regular expressions would require another top-level pass.
We'll deal with those later. There are ties to language theory here, but that's
a story for another day.)&lt;/p&gt;
&lt;p&gt;We'll parse the regular expression into a data structure that's easier to
handle. Fortunately, there's a piece of code out there that knows how to
generate strings matching a given regex, which has a parser we can reuse. That
parser is designed for Java's regular expression syntax. It's not quite
identical to that of JavaScript, but we're hoping that the puzzles avoid those
tricky edge cases for now.&lt;/p&gt;
&lt;p&gt;To parse, we use &lt;code&gt;[com.gfredericks.test.chuck.regexes :as cre]&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cre/parse&lt;/span&gt; &lt;span class="s"&gt;"HE|LL|O+"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;;; =&amp;gt; (read: produces)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:alternation&lt;/span&gt;,
 &lt;span class="ss"&gt;:elements&lt;/span&gt;
 &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:concatenation&lt;/span&gt;,
   &lt;span class="ss"&gt;:elements&lt;/span&gt;
   &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt;, &lt;span class="ss"&gt;:character&lt;/span&gt; &lt;span class="sc"&gt;\H&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt;, &lt;span class="ss"&gt;:character&lt;/span&gt; &lt;span class="sc"&gt;\E&lt;/span&gt;&lt;span class="p"&gt;})}&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:concatenation&lt;/span&gt;,
   &lt;span class="ss"&gt;:elements&lt;/span&gt;
   &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt;, &lt;span class="ss"&gt;:character&lt;/span&gt; &lt;span class="sc"&gt;\L&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt;, &lt;span class="ss"&gt;:character&lt;/span&gt; &lt;span class="sc"&gt;\L&lt;/span&gt;&lt;span class="p"&gt;})}&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:concatenation&lt;/span&gt;,
   &lt;span class="ss"&gt;:elements&lt;/span&gt;
   &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:repetition&lt;/span&gt;,
     &lt;span class="ss"&gt;:elements&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt;, &lt;span class="ss"&gt;:character&lt;/span&gt; &lt;span class="sc"&gt;\O&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;,
     &lt;span class="ss"&gt;:bounds&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;]})})}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Progress! It is indeed an alternation (a or b) of a concatenation of H and E, or
L and L, or the letter O one or more times. &lt;/p&gt;
&lt;h2&gt;Logic machinery&lt;/h2&gt;
&lt;p&gt;The logic programming engine is going to search a tree of possibilities for
solutions that fit your constraints. Logic programming is inherently
declarative: instead of telling the computer how to find the answer, we describe
what the answer looks like.&lt;/p&gt;
&lt;p&gt;An lvar that doesn't have a value assigned to it yet (it could still be
anything) is called "fresh". An lvar with a definite value is called "bound".
There is nothing preventing your program from returning fresh variables: that
just means the answer that doesn't rely on what that lvar taking any particular
value (like the &lt;em&gt;x&lt;/em&gt; in &lt;em&gt;0x = 0&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;In core.logic, a program consists of a series of expressions called &lt;em&gt;goals&lt;/em&gt;.
&lt;code&gt;(l/== a b)&lt;/code&gt; is a goal to make the values of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; equal. It does not, by
itself, compare &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt; or assign anything to anything. It just expresses the
idea of comparing the two. Logic programming calls this "unification".&lt;/p&gt;
&lt;p&gt;As the engine searches the space of possible answers, sometimes &lt;code&gt;a&lt;/code&gt; will be
equal to &lt;code&gt;b&lt;/code&gt; already, or &lt;code&gt;a&lt;/code&gt; will be bound and &lt;code&gt;b&lt;/code&gt; will be fresh in which case
&lt;code&gt;b&lt;/code&gt; will become bound to whatever &lt;code&gt;a&lt;/code&gt; was bound to. Either way, the two
variables can be &lt;em&gt;unified&lt;/em&gt; and the goal is said to &lt;em&gt;succeed&lt;/em&gt;. But in many parts
of the tree this doesn't work out: &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; will already be bound to
incompatible values. In that case, the goal is said to fail. Unification is just
one of many goals, but it's the most important one in most programs including
ours.&lt;/p&gt;
&lt;p&gt;(You'll probably be happy to learn &lt;code&gt;l/==&lt;/code&gt;, full name &lt;code&gt;clojure.core.logic/==&lt;/code&gt;, is
just a function. It requires learning a ton of deep logic machinery to grok, but
at least it's not magic.)&lt;/p&gt;
&lt;p&gt;Finally, we need a way to actually run the logic programming engine. that's
&lt;code&gt;clojure.core.logic/run&lt;/code&gt;'s job. Something like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;l/run&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;q&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;            &lt;span class="c1"&gt;;; run to find up to one answer with logic vars [q]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;l/==&lt;/span&gt; &lt;span class="nv"&gt;q&lt;/span&gt; &lt;span class="ss"&gt;'fred&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="c1"&gt;;; where q is unified with 'fred&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;... will return &lt;code&gt;('fred)&lt;/code&gt; (the 1-list with the symbol &lt;code&gt;'fred&lt;/code&gt; in it) because
there's only one answer for &lt;code&gt;q&lt;/code&gt; that makes all the goals (here just one goal)
succeed. &lt;code&gt;run&lt;/code&gt; has a sibling &lt;code&gt;run*&lt;/code&gt; that gets you all the answers. It returns
the same result, because there's only one value for &lt;code&gt;q&lt;/code&gt; that makes all goals
succeed.&lt;/p&gt;
&lt;p&gt;It takes the &lt;em&gt;maximum number of answers&lt;/em&gt; as a parameter. Since you're describing
what the answer looks like, there might be zero, one, or any other number of
answers. Sometimes the engine will be able to prove there are no other options
(because the search was exhaustive) and it'll return fewer. Some pathological
programs run forever, some so long it might as well be forever.&lt;/p&gt;
&lt;h2&gt;Direct match&lt;/h2&gt;
&lt;p&gt;The simplest possible regular expression is just a character, which matches
itself: &lt;code&gt;A&lt;/code&gt;. In our parse tree, this is an entry of &lt;code&gt;:type&lt;/code&gt; &lt;code&gt;:character&lt;/code&gt;. We'll
write a multimethod dispatching on &lt;code&gt;:type&lt;/code&gt; to make this work so we can implement
other types later.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defmulti &lt;/span&gt;&lt;span class="nv"&gt;re-&amp;gt;goal&lt;/span&gt; &lt;span class="ss"&gt;:type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;A character looks like this: &lt;code&gt;{:type :character, :character \L}&lt;/code&gt;. We'll use
destructuring to extract the &lt;code&gt;:character&lt;/code&gt; key. In general, this multimethod will
take multiple lvars, though incidentally in the case of &lt;code&gt;:character&lt;/code&gt; it'll
be just one, so we can destructure it as well.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defmethod &lt;/span&gt;&lt;span class="nv"&gt;re-&amp;gt;goal&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt;
  &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:keys&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;character&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;lvar&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;l/==&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="nv"&gt;lvar&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;We'll write a test to verify this works.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;t/deftest&lt;/span&gt; &lt;span class="nv"&gt;re-&amp;gt;goal-character-test&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;t/is&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;\A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;l/run*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;q&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rcl/re-&amp;gt;goal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt; &lt;span class="sc"&gt;\A&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;q&lt;/span&gt;&lt;span class="p"&gt;])))))&lt;/span&gt;
&lt;/pre&gt;


&lt;h2&gt;Concatenation&lt;/h2&gt;
&lt;p&gt;We want to be able to solve squares, not just individual letters. The simplest
example of that is concatenation. The simplest case is a concatenation of two
letters:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt; &lt;span class="sc"&gt;\A&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;aa&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:concatenation&lt;/span&gt; &lt;span class="ss"&gt;:elements&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;A simple test:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;t/deftest&lt;/span&gt; &lt;span class="nv"&gt;re-&amp;gt;goal-concatenation-test&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;t/is&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="sc"&gt;\A&lt;/span&gt; &lt;span class="sc"&gt;\A&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;l/run*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;p&lt;/span&gt; &lt;span class="nv"&gt;q&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rcl/re-&amp;gt;goal&lt;/span&gt; &lt;span class="nv"&gt;aa&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;p&lt;/span&gt; &lt;span class="nv"&gt;q&lt;/span&gt;&lt;span class="p"&gt;])))))&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;A simple implementation passes this test:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defmethod &lt;/span&gt;&lt;span class="nv"&gt;re-&amp;gt;goal&lt;/span&gt; &lt;span class="ss"&gt;:concatenation&lt;/span&gt;
  &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:keys&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt; &lt;span class="nv"&gt;lvars&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;l/and*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;for &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;e&lt;/span&gt; &lt;span class="nv"&gt;elements&lt;/span&gt;
                &lt;span class="nv"&gt;v&lt;/span&gt; &lt;span class="nv"&gt;lvars&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;re-&amp;gt;goal&lt;/span&gt; &lt;span class="nv"&gt;e&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]))))&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;(&lt;code&gt;l/and*&lt;/code&gt;is a function that returns a goal that succeeds when all its goals
succeed. We'd use the macro version &lt;code&gt;l/all&lt;/code&gt; if we were explicitly writing out
our goals. Because we're generating them, it's easier to use a function.)&lt;/p&gt;
&lt;p&gt;This passes the test, but we're clearly abusing the fact that we happen to know
that the parts are characters and therefore length 1. Those constituent parts
could be anything, and so they could be longer than 1. We can't write a test for
that yet, because we don't have any regex parses that express different options
yet. Concatenations of characters only match exactly one thing, so they have
fixed length. We already saw the remaining two things to implement in our first
parse tree: &lt;code&gt;:alternation&lt;/code&gt; (&lt;em&gt;or&lt;/em&gt;, &lt;code&gt;A|B&lt;/code&gt;) and &lt;code&gt;:repetition&lt;/code&gt; (&lt;code&gt;A{x,y}&lt;/code&gt; plus
shorthand spellings &lt;code&gt;A*&lt;/code&gt; and &lt;code&gt;A+&lt;/code&gt;). Alternation came first, so let's try that
next.&lt;/p&gt;
&lt;p&gt;(We could technically produce a concatenation of concatenations, or character
literals that contain multiple characters, but our parser produces neither and
I'd rather work from real examples. Plus, we have to implement alternation
anyway.)&lt;/p&gt;
&lt;h2&gt;Alternation&lt;/h2&gt;
&lt;p&gt;Let's look at a few parse trees for some simple alternations:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cre/parse&lt;/span&gt; &lt;span class="s"&gt;"A|B"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;;; =&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:alternation&lt;/span&gt;,
 &lt;span class="ss"&gt;:elements&lt;/span&gt;
 &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:concatenation&lt;/span&gt;, &lt;span class="ss"&gt;:elements&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt;, &lt;span class="ss"&gt;:character&lt;/span&gt; &lt;span class="sc"&gt;\A&lt;/span&gt;&lt;span class="p"&gt;})}&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:concatenation&lt;/span&gt;, &lt;span class="ss"&gt;:elements&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt;, &lt;span class="ss"&gt;:character&lt;/span&gt; &lt;span class="sc"&gt;\B&lt;/span&gt;&lt;span class="p"&gt;})})}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Per our note above, we should also think of an example where the options are
different length.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cre/parse&lt;/span&gt; &lt;span class="s"&gt;"AAA|B"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;;; =&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:alternation&lt;/span&gt;,
 &lt;span class="ss"&gt;:elements&lt;/span&gt;
 &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:concatenation&lt;/span&gt;,
   &lt;span class="ss"&gt;:elements&lt;/span&gt;
   &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt;, &lt;span class="ss"&gt;:character&lt;/span&gt; &lt;span class="sc"&gt;\A&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt;, &lt;span class="ss"&gt;:character&lt;/span&gt; &lt;span class="sc"&gt;\A&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt;, &lt;span class="ss"&gt;:character&lt;/span&gt; &lt;span class="sc"&gt;\A&lt;/span&gt;&lt;span class="p"&gt;})}&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:concatenation&lt;/span&gt;, &lt;span class="ss"&gt;:elements&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt;, &lt;span class="ss"&gt;:character&lt;/span&gt; &lt;span class="sc"&gt;\B&lt;/span&gt;&lt;span class="p"&gt;})})}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;It's also probably a good idea to consider something with more than two alternatives:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cre/parse&lt;/span&gt; &lt;span class="s"&gt;"A|B|C"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;;; =&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:alternation&lt;/span&gt;,
 &lt;span class="ss"&gt;:elements&lt;/span&gt;
 &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:concatenation&lt;/span&gt;, &lt;span class="ss"&gt;:elements&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt;, &lt;span class="ss"&gt;:character&lt;/span&gt; &lt;span class="sc"&gt;\A&lt;/span&gt;&lt;span class="p"&gt;})}&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:concatenation&lt;/span&gt;, &lt;span class="ss"&gt;:elements&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt;, &lt;span class="ss"&gt;:character&lt;/span&gt; &lt;span class="sc"&gt;\B&lt;/span&gt;&lt;span class="p"&gt;})}&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:concatenation&lt;/span&gt;, &lt;span class="ss"&gt;:elements&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt;, &lt;span class="ss"&gt;:character&lt;/span&gt; &lt;span class="sc"&gt;\C&lt;/span&gt;&lt;span class="p"&gt;})})}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;We need a way to express disjunction&lt;/p&gt;
&lt;p&gt;This primer is a little unorthodox because we're walking through a problem that
requires rule generation. Most introductory texts make you write simple, static
rules and build up from there. Just like &lt;code&gt;l/and*&lt;/code&gt; had a macro variant &lt;code&gt;l/all&lt;/code&gt;,
disjunction is much more commonly expressed with the macro &lt;code&gt;l/conde&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Fixing :concatenation&lt;/h2&gt;
&lt;p&gt;As we discovered earlier: concatenation is broken. It assumes each part is a
character, and specifically that each part is length 1.&lt;/p&gt;
&lt;h2&gt;Fixing :character&lt;/h2&gt;
&lt;p&gt;What the concatenation problem tells us is that character is broken, too. It
returned a successful goal when given more than one lvar.&lt;/p&gt;
&lt;p&gt;We communicate a problem with a failing goal. If some goal fails, the engine
will stop exploring that branch. The always-failing goal &lt;code&gt;l/fail&lt;/code&gt; is designed
for this sort of thing. (You can probably guess what its counterpart &lt;code&gt;l/succeed&lt;/code&gt;
does.)&lt;/p&gt;
&lt;p&gt;We wrote our &lt;code&gt;:character&lt;/code&gt; rule to assume that there would only be one lvar. That
made sense because we knew that was always the case. But now &lt;code&gt;:concatenation&lt;/code&gt;
may attempt to call it with more, so we use &lt;code&gt;l/fail&lt;/code&gt; to communicate the problem.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defmethod &lt;/span&gt;&lt;span class="nv"&gt;re-&amp;gt;goal&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt;
  &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:keys&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;character&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;lvar&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;lvars&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;lvars&lt;/span&gt; &lt;span class="nb"&gt;count &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;l/==&lt;/span&gt; &lt;span class="nv"&gt;character&lt;/span&gt; &lt;span class="nv"&gt;lvar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;l/fail&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;You could also do this in logic programming so that it's checked at runtime, but
since we're generating our goals ahead of time here and only giving them to the
engine at the end, we can short-circuit here.&lt;/p&gt;
&lt;h2&gt;Repetition&lt;/h2&gt;
&lt;h3&gt;Sample repetition parses&lt;/h3&gt;
&lt;p&gt;Let's see what the parser does for a few simple repetitions:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cre/parse&lt;/span&gt; &lt;span class="s"&gt;"A{1}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;;; =&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:alternation&lt;/span&gt;,
 &lt;span class="ss"&gt;:elements&lt;/span&gt;
 &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:concatenation&lt;/span&gt;,
   &lt;span class="ss"&gt;:elements&lt;/span&gt;
   &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:repetition&lt;/span&gt;,
     &lt;span class="ss"&gt;:elements&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt;, &lt;span class="ss"&gt;:character&lt;/span&gt; &lt;span class="sc"&gt;\A&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;,
     &lt;span class="ss"&gt;:bounds&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nv"&gt;N&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nv"&gt;N&lt;/span&gt;&lt;span class="p"&gt;]})})}&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cre/parse&lt;/span&gt; &lt;span class="s"&gt;"A{1,}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;;; =&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:alternation&lt;/span&gt;,
 &lt;span class="ss"&gt;:elements&lt;/span&gt;
 &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:concatenation&lt;/span&gt;,
   &lt;span class="ss"&gt;:elements&lt;/span&gt;
   &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:repetition&lt;/span&gt;,
     &lt;span class="ss"&gt;:elements&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt;, &lt;span class="ss"&gt;:character&lt;/span&gt; &lt;span class="sc"&gt;\A&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;,
     &lt;span class="ss"&gt;:bounds&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nv"&gt;N&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;]})})}&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cre/parse&lt;/span&gt; &lt;span class="s"&gt;"A{1,2}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;;; =&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:alternation&lt;/span&gt;,
 &lt;span class="ss"&gt;:elements&lt;/span&gt;
 &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:concatenation&lt;/span&gt;,
   &lt;span class="ss"&gt;:elements&lt;/span&gt;
   &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:repetition&lt;/span&gt;,
     &lt;span class="ss"&gt;:elements&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt;, &lt;span class="ss"&gt;:character&lt;/span&gt; &lt;span class="sc"&gt;\A&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;,
     &lt;span class="ss"&gt;:bounds&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nv"&gt;N&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nv"&gt;N&lt;/span&gt;&lt;span class="p"&gt;]})})}&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cre/parse&lt;/span&gt; &lt;span class="s"&gt;"A*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;;; =&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:alternation&lt;/span&gt;,
 &lt;span class="ss"&gt;:elements&lt;/span&gt;
 &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:concatenation&lt;/span&gt;,
   &lt;span class="ss"&gt;:elements&lt;/span&gt;
   &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:repetition&lt;/span&gt;,
     &lt;span class="ss"&gt;:elements&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt;, &lt;span class="ss"&gt;:character&lt;/span&gt; &lt;span class="sc"&gt;\A&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;,
     &lt;span class="ss"&gt;:bounds&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;]})})}&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cre/parse&lt;/span&gt; &lt;span class="s"&gt;"A+"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;;; =&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:alternation&lt;/span&gt;,
 &lt;span class="ss"&gt;:elements&lt;/span&gt;
 &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:concatenation&lt;/span&gt;,
   &lt;span class="ss"&gt;:elements&lt;/span&gt;
   &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:repetition&lt;/span&gt;,
     &lt;span class="ss"&gt;:elements&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="ss"&gt;:character&lt;/span&gt;, &lt;span class="ss"&gt;:character&lt;/span&gt; &lt;span class="sc"&gt;\A&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;,
     &lt;span class="ss"&gt;:bounds&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;]})})}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This matches our expectation, since:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;A{n}&lt;/code&gt; means exactly &lt;em&gt;n&lt;/em&gt; A's&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A{m,n}&lt;/code&gt; means between &lt;em&gt;m&lt;/em&gt; and &lt;em&gt;n&lt;/em&gt; A's, inclusive&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A{n,}&lt;/code&gt; means &lt;code&gt;n&lt;/code&gt; or more A's&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A*&lt;/code&gt; means 0 or more A's&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A+&lt;/code&gt; means 1 or more A's&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;"No bound" is represented by &lt;code&gt;nil&lt;/code&gt;. Some numbers are represented as just &lt;code&gt;1&lt;/code&gt;,
others as &lt;code&gt;1N&lt;/code&gt;. The latter are &lt;code&gt;clojure.lang.BigInts&lt;/code&gt;, not longs. The parser
does this so it can support regexes with pathologically large sizes (longer than
a &lt;code&gt;long&lt;/code&gt;, a signed 64-bit integer). We can ignore that distinction: both behave
identically for our purposes.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This introduction was a little unorthodox. Most texts focus on introducing
different primitives, have you write small static rules and build up from there.
You'll see &lt;code&gt;conde&lt;/code&gt; long before anyone talks to you about &lt;code&gt;or*&lt;/code&gt;. That's just a
consequence of how I wrote this post, not a principled stance. Reading &lt;a href="https://www.amazon.com/Little-Schemer-Daniel-P-Friedman/dp/0262560992"&gt;The
Little Schemer&lt;/a&gt; is still a good idea if you want to learn to write your own
programs.&lt;/p&gt;
&lt;h2&gt;Next steps&lt;/h2&gt;
&lt;p&gt;These are things I thought were neat but didn't make sense in the original text.&lt;/p&gt;
&lt;h3&gt;Running programs backwards&lt;/h3&gt;
&lt;p&gt;A truly mind-bending feature of relational programs is that they can be ran
"backwards". Usually, you write a program "forwards": it has some inputs and you
expect some outputs. If you write your logic program a particular way, it
doesn't actually know what's an input and what's an output, and so you can give
it an "output" and it will come up with "inputs" that would have led to that
output. This post did not demonstrate that, but it's one of the better hooks
I've found to get people excited about logic programming. I could not give this
talk better than &lt;a href="https://www.youtube.com/watch?v=RVDCRlW1f1Y"&gt;Will Byrd presenting miniKanren&lt;/a&gt;. I won't spoil the
ending, but go watch that talk.&lt;/p&gt;
&lt;p&gt;Our program does not work that way. All our "inputs" are rules, all our lvars
are the same kind (unknown boxes), so running it "backwards" doesn't really mean
anything. It could, if our parser and rule generation were also fully
relational. In that case, we could fill out some boxes and our program would
tell us progressively more creative regular expressions that would match them.
Instead of a puzzle solver, we would have written a puzzle creator.&lt;/p&gt;
&lt;h3&gt;Palindromes&lt;/h3&gt;
&lt;p&gt;Some puzzles have hints that help you solve them. Usually they're thematic cues,
(e.g. "Hamlet") which are hard to tell a logic engine about. Structural cues are
easy. For example, if you think some lines should be palindromes, you can just
add the following constraint:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;l/all*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;l/==&lt;/span&gt; &lt;span class="nv"&gt;vars&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reverse &lt;/span&gt;&lt;span class="nv"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="nv"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;If evaluated at the right time, this should constrain the search tree. It's
tricky to make sure that happens without measurement and fiddling.&lt;/p&gt;
&lt;h3&gt;Thematic cues&lt;/h3&gt;
&lt;p&gt;If you really wanted to add thematic cues, e.g. "Hamlet", you could grab the
Wikipedia page, use something like TF/IDF to find important words, filter by the
appropriate size, and introduce them as constraints. I don't expect this will
speed anything up much even if you discount the initial step.&lt;/p&gt;&lt;/div&gt;</description><category>clojure</category><guid>https://www.lvh.io/posts/solving-regex-crosswords.html</guid><pubDate>Sat, 26 Oct 2019 02:36:29 GMT</pubDate></item><item><title>Smaller Clojure Docker builds with multi-stage builds</title><link>https://www.lvh.io/posts/smaller-clojure-docker-builds-with-multi-stage-builds.html</link><dc:creator>lvh</dc:creator><description>&lt;div&gt;&lt;p&gt;A common pattern in Docker is to use a separate build environment from the
runtime environment. Many platforms have different requirements when you're
generating a runnable artifact than when you're running it.&lt;/p&gt;
&lt;p&gt;In languages like Go, Rust or C, where the most common implementations produce
native binaries, the resulting artifact may require nothing from the environment
at all, or perhaps as little as a C standard library. Even in languages like
Python that don't typically have a build step, you might indirectly use code
that still requires compilation. Common examples include OpenSSL with
pyca/cryptography or NETLIB and other numerical libraries with numpy/scipy.&lt;/p&gt;
&lt;p&gt;In Clojure, you can easily build "uberjars" with both lein and boot. These are
jars (the standard JVM deployable artifact) that come with all dependencies
prepackaged, requiring nothing beyond what's in the Java standard library
(rt.jar). While this still requires a JRE to run, that is still much smaller
than the full development environment.&lt;/p&gt;
&lt;p&gt;There are a few advantages to separating environments. It all boils down to them
not having anything in them they don't need. That has clear performance
advantages, although Docker has historically mitigated this problem with layered
pulls. It can have security benefits as well: you can't have bugs in software
you don't ship. Even software that isn't directly used in the build process can
be affected: some build environments will contain plenty of software that is
never used that would normally carry over into your production environments.&lt;/p&gt;
&lt;p&gt;Historically, most users of Docker haven't bothered. Even if there are
advantages, they aren't worth the hassle of having separate Docker environments
and ferrying data between them. While different ways of effectively sharing data
between containers have been available for years, people who wanted a shared
build step have mostly had to write their own tooling. For example,
my &lt;a href="https://github.com/lvh/icecap/blob/master/utils/build-libsodium-package.sh"&gt;icecap&lt;/a&gt; project has a batch file with an embedded Dockerfile that builds
libsodium debs.&lt;/p&gt;
&lt;p&gt;The upcoming release of Docker will add support for a new feature called
multi-stage builds, where this pattern is much simpler. Dockerfiles themselves
know about your precursor environments now, and future containers have full
access to previous containers for copying build artifacts around. This
requires Docker 17.05 or newer.&lt;/p&gt;
&lt;p&gt;Here's an example Dockerfile that builds an uberjar from a standard lein-based
app, and puts it in a new JRE image:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;FROM clojure AS build-env
WORKDIR /usr/src/myapp
COPY project.clj /usr/src/myapp/
RUN lein deps
COPY . /usr/src/myapp
RUN mv "$(lein uberjar | sed -n 's/^Created \(.*standalone\.jar\)/\1/p')" myapp-standalone.jar

FROM openjdk:8-jre-alpine
WORKDIR /myapp
COPY --from=build-env /usr/src/myapp/myapp-standalone.jar /myapp/myapp.jar
ENTRYPOINT ["java", "-jar", "/myapp/myapp.jar"]
&lt;/pre&gt;


&lt;p&gt;This captures the uberjar name from the &lt;code&gt;lein uberjar&lt;/code&gt; output. If your uberjar
name doesn't end in &lt;code&gt;.standalone.jar&lt;/code&gt;, that won't work. You can change the name
of the uberjar with the &lt;code&gt;:uberjar-name&lt;/code&gt; setting in &lt;code&gt;project.clj&lt;/code&gt;. If you set it
to &lt;code&gt;myapp-standalone.jar&lt;/code&gt;, you don't need the gnarly &lt;code&gt;sed&lt;/code&gt; expression anymore at
all, and can just call &lt;code&gt;lein uberjar&lt;/code&gt;. (Thanks to Łukasz Korecki for the
suggestion!)&lt;/p&gt;
&lt;p&gt;The full clojure base image is a whopping 629MB (according to &lt;code&gt;docker images&lt;/code&gt;),
whereas &lt;code&gt;openjdk:8-jre-alpine&lt;/code&gt; clocks in at 81.4MB. That's a little bit of an
unfair comparison: &lt;code&gt;clojure&lt;/code&gt; also has an alpine-based image. However, this still
illustrates the savings compared to the most commonly used Docker image.&lt;/p&gt;
&lt;p&gt;There are still good reasons for not using multi-stage builds. In the icecap
example above, the entire point is to use Docker as a build system to produce
a deb artifact &lt;em&gt;outside of Docker&lt;/em&gt;. However, that's a pretty exotic use case:
for most people this will hopefully make smaller Docker images an easy
reality.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edited:&lt;/em&gt; The original blog post said that the Docker version to support this
feature was in beta at time of writing. That was/is correct, but it's since
been released, so I updated the post.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edited:&lt;/em&gt;* Łukasz Korecki pointed out that &lt;code&gt;project.clj&lt;/code&gt; has an &lt;code&gt;:uberjar-name&lt;/code&gt;
parameter which can be used to avoid the gnarly &lt;code&gt;sed&lt;/code&gt; expression. Thanks Łukasz!&lt;/p&gt;&lt;/div&gt;</description><category>clojure</category><category>docker</category><guid>https://www.lvh.io/posts/smaller-clojure-docker-builds-with-multi-stage-builds.html</guid><pubDate>Fri, 16 Jun 2017 17:12:46 GMT</pubDate></item><item><title>What the heck is a clojure.lang.IFn$LO?</title><link>https://www.lvh.io/posts/what-the-heck-is-a-clojurelangifnlo.html</link><dc:creator>lvh</dc:creator><description>&lt;div&gt;&lt;p&gt;It's no secret that I love Clojure. Like any tool though, it isn't
perfect. Today, I was trying to write unit tests that use
&lt;tt class="docutils literal"&gt;clojure.core.async/timeout&lt;/tt&gt;, so I wrote a test double analogous to
Twisted's &lt;tt class="docutils literal"&gt;Clock&lt;/tt&gt;. As I tried to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;with-redefs&lt;/span&gt;&lt;/tt&gt; it in, I got the
most inscrutable error message out: &lt;tt class="docutils literal"&gt;java.lang.ClassCastException:
icecap.handlers.delay_test$fake_timeout$timeout__22934 cannot be cast
to clojure.lang.IFn$LO&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Wha? I know &lt;tt class="docutils literal"&gt;clojure.lang.IFn&lt;/tt&gt;, Clojure's function type, but what
the heck is a &lt;tt class="docutils literal"&gt;clojure.lang.IFn$LO&lt;/tt&gt;?&lt;/p&gt;
&lt;p&gt;Searching for the term didn't give any particularly useful results. It
was clear this happened when I was redeffing the original &lt;tt class="docutils literal"&gt;timeout&lt;/tt&gt;,
so I looked at its documentation:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
clojure.core.async/timeout
([msecs])
Returns a channel that will close after msecs
&lt;/pre&gt;
&lt;p&gt;Doesn't look too special to me. What's the type of that thing, anyway?
Let's find out:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt; (parents (type timeout))
#{clojure.lang.IFn$LO clojure.lang.AFunction}
&lt;/pre&gt;
&lt;p&gt;Aha! So that is actually part of &lt;tt class="docutils literal"&gt;timeout&lt;/tt&gt;, not something else wonky
going on. What does the source say? It's a pretty lame shim:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(defn timeout
"Returns a channel that will close after msecs"
[^long msecs]
(timers/timeout msecs))
&lt;/pre&gt;
&lt;p&gt;I mean, nothing interesting there, just a type hint.&lt;/p&gt;
&lt;p&gt;Oh. Wait. That's not just a type hint. &lt;tt class="docutils literal"&gt;long&lt;/tt&gt; is a primitive.
Testing:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt; (parents (type (fn [^long x] x)))
#{clojure.lang.IFn$LO clojure.lang.AFunction}
&lt;/pre&gt;
&lt;p&gt;Aha! Due to a JVM quirk, functions with a primitive type hint are
special. That works for doubles, too:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt; (parents (type (fn [^double x] x)))
#{clojure.lang.IFn$DO clojure.lang.AFunction}
&lt;/pre&gt;
&lt;p&gt;And multiple arguments:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt; (parents (type (fn [^double x ^double y] x)))
#{clojure.lang.IFn$DDO clojure.lang.AFunction}
&amp;gt; (parents (type (fn [^double x ^long y] x)))
#{clojure.lang.IFn$DLO clojure.lang.AFunction}
&lt;/pre&gt;
&lt;p&gt;Adding a simple type hint to the function fixed it. Success!&lt;/p&gt;&lt;/div&gt;</description><category>clojure</category><guid>https://www.lvh.io/posts/what-the-heck-is-a-clojurelangifnlo.html</guid><pubDate>Thu, 02 Oct 2014 13:15:17 GMT</pubDate></item></channel></rss>